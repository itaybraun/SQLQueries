--Create the temp table
DECLARE @TableName sysname;
SET @TableName = 'tblAdTimeline';
DECLARE @ObjectID int;
SET @ObjectID = Object_ID(@TableName);
--------------------------------------------------
IF OBJECT_ID('tempdb..#Fact_table') IS NULL
	CREATE TABLE #Fact_table
		(FactID uniqueidentifier,
		FactKey varchar(128),
		FactLable nvarchar(300), 
		Value nvarchar(300), 
		FactCategory nvarchar(30) DEFAULT NULL
		);

--Insert the values in different commands as each has a different data type
INSERT INTO #Fact_table
VALUES  ('E68C915D-EDD3-466F-8514-000000000001', 'ObjectID', 'Object ID', @ObjectID, 'Schema'); 
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000002', 'TableName', 'Table Name', @TableName, 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000003', 'Table.Schema', 'Schema', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000004', 'DBName', 'Datababse', DB_NAME(), 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000004', 'Table.CreateDate', 'Create Date', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000004', 'Table.FileGroup', 'File Group', '<TODO>', 'Schema');

--Number of Columns
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000005', 'NumberOfColumns', 'Number of Columns', (SELECT COUNT(*) FROM syscolumns WHERE id = @ObjectID), 'Schema');

INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000041', 'Table.NumberOfFK', 'Number of Foreign Key', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000042', 'Table.NumberOfTriggers', 'Number of Triggers', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000043', 'Table.NumberOfConstraints', 'Number of Constraints', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000044', 'Table.NumberOfComputedColumns', 'Number of Computed Columns', '<TODO>', 'Schema');

INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000003', 'Table.IsMemoryOptimized', 'Is In-Memory', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000003', 'Table.IsTemporal', 'Is Temporal', '<TODO>', 'Schema');
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000003', 'Table.NumberOfPartitions', 'Number of Partitions', 
	(SELECT COUNT(PRT.partition_id) AS Rows
		FROM    sys.partitions PRT 
		WHERE PRT.object_ID = @ObjectID AND PRT.index_id in (1,0)), 
'Schema');

INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000006', 'PK.Exists', 'A Primary Key Exists', 
	(SELECT CASE 
		WHEN Count(index_id) = 1 THEN 'True'
		ELSE 'False'
		END 
	FROM sys.indexes WHERE object_id = @ObjectID AND is_primary_key = 1)
	, 'Schema');

--PK Index Name. Returns NULL if doesn'nt exists
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000007', 'PK.Name', 'Primary Key Index Name', 
	(SELECT name FROM sys.indexes WHERE object_id = @ObjectID AND is_primary_key = 1)
	, 'Schema');
--PK Index ID. Returns NULL if doesn'nt exists
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000008', 'PK.IndexType', 'Primary Key Index Type', 
	(SELECT type_desc FROM sys.indexes WHERE object_id = @ObjectID AND is_primary_key = 1)
	, 'Schema');


--PK Index Name. Returns NULL if doesn'nt exists
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000009', 'PK.CountColumns', 'Number of columns in the PK', 
	(SELECT COUNT(INC.column_id)
		FROM sys.indexes as IND
			INNER JOIN sys.index_columns as INC 
				ON IND.object_id = INC.object_id
				AND IND.index_id = INC.index_id
		WHERE IND.object_id = @ObjectID AND IND.is_primary_key = 1)
	, 'Schema');

--PK Columns names
--If PK.NumberOfColumns = 0 (=> No PK) then do nothing. 
IF (SELECT Cast(value as INT) FROM #Fact_table WHERE FactKey = 'PK.CountColumns') = 0
	INSERT INTO #Fact_table
	VALUES   ('E68C915D-EDD3-466F-8514-00000000010', 'PK.ColumnsNames', 'Name of the columns', NULL, 'Schema') 
ELSE 
IF (SELECT Cast(value as INT) FROM #Fact_table WHERE FactKey = 'PK.CountColumns') = 1
BEGIN 
	INSERT INTO #Fact_table
	VALUES   ('E68C915D-EDD3-466F-8514-000000000011', 'PK.ColumnsNames', 'Name of the columns', 
		(SELECT  COL.name
			FROM sys.indexes as IND
				INNER JOIN sys.index_columns as INC 
					ON IND.object_id = INC.object_id
					AND IND.index_id = INC.index_id
				INNER JOIN sys.columns as COL
					ON IND.object_id = COL.object_id
					AND INC.column_id = COL.column_id
			WHERE IND.object_id = @ObjectID AND IND.is_primary_key = 1)
		, 'Schema');
 END
--TODO - If there are more than 1 column, concatenate them. (using STRING_AGG (SQL2017+))

--PK Key Size
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000012', 'PK.KeySize', 'Primary Key size (bytes)', 
(SELECT  Sum(COL.max_length)
	FROM sys.indexes as IND
		INNER JOIN sys.index_columns as INC 
			ON IND.object_id = INC.object_id
			AND IND.index_id = INC.index_id
		INNER JOIN sys.columns as COL
			ON IND.object_id = COL.object_id
			AND INC.column_id = COL.column_id
	WHERE IND.object_id = @ObjectID AND IND.is_primary_key = 1)
, 'Schema');


--Table has Identity column
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000030', 'Table.HasIdentity', 'Has an Identity Column', 
(SELECT  CASE COUNT (COL.Name) WHEN 0 THEN 'False' ELSE 'True' END
	FROM sys.columns as COL
	WHERE COL.object_id = @ObjectID 
		AND COL.is_identity = 1)
, 'Schema');
--Identity Column Name
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000031', 'Table.IdentityColumnName', 'Identity Column Name', 
(SELECT  COL.Name
	FROM sys.columns as COL
	WHERE COL.object_id = @ObjectID 
		AND COL.is_identity = 1)
, 'Schema');

--Total Number of indexes
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000050', 'Table.NumberOfIndexes', 'Number of Indexes', 
(SELECT  Count(index_id) FROM sys.indexes as IND WHERE IND.object_id = @ObjectID)
, 'Schema');

--Number of Clustered indexes
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000051', 'Table.NumberOfClusteredIndexes', 'Number of Clustered Indexes', 
(SELECT  Count(index_id) FROM sys.indexes as IND 
	WHERE IND.object_id = @ObjectID and IND.type_desc = 'CLUSTERED')
, 'Schema');

--Number of NON Clustered indexes
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000052', 'Table.NumberOfNonClusteredIndexes', 'Number of Non Clustered Indexes', 
(SELECT  Count(index_id) FROM sys.indexes as IND 
	WHERE IND.object_id = @ObjectID and IND.type_desc = 'NONCLUSTERED')
, 'Schema');

--Number of columnstore indexes
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000053', 'Table.NumberOfNonColumnstoreIndexes', 'Number of Non Columnstore Indexes', 
'<TODO>', 'Schema');

--Deprecated Data Types: Image, Text, NText
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000014', 'Table.HasDeprecatedDataTypes', 'Has Deprecated Data Types', 
	(SELECT Count(COL.column_id)
	  FROM sys.columns AS COL 
	  WHERE COL.system_type_id IN (34, 35, 99)) /*Image, Ntext, Text*/, 'Schema');
--TODO: show column names if relevant



----------------------------------------  Storage ---------------------------------------------
-----------------------------------------------------------------------------------------------
--Number of rows
--sys.partitions has a row for each table / indexes, therefore use only the main one, clustered (indexIS = 1) or heap (0)
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000100', 'Table.NumberOfRows', 'Number of Rows', 
	(SELECT SUM(PRT.rows) AS Rows
FROM    sys.partitions PRT 
WHERE PRT.object_ID = @ObjectID AND PRT.index_id in (1,0))
, 'Storage');

--Total Size in KB
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000101', 'Table.AllocatedSpace', 'Allocated Space (KB)', 
	(SELECT SUM(ALC.total_pages) * 8
FROM    sys.partitions PRT 
INNER JOIN
    sys.allocation_units ALC ON PRT.partition_id = ALC.container_id
WHERE PRT.object_ID = @ObjectID AND PRT.index_id in (1,0))
, 'Storage');

INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000102', 'Table.UsedSpace', 'Used Space', '<TODO>', 'Storage');	
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000103', 'Table.UnusedSpace', 'Unsed Space', '<TODO>', 'Storage');	
   -- SUM(a.used_pages) * 8 AS UsedSpaceKB,
   -- (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000110', 'Table.ClusteredIndexFragmentation', 'Clustered Index Fragmentation', '<TODO>', 'Storage');	

------------------------------------   Activity ------------------------------------
------------------------------------------------------------------------------------
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000200', 'LastRestart', 'Last Restart', '<TODO>', 'Activity');	
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000200', 'Table.ActivityRead', 'Read Activity', '<TODO>', 'Activity');	
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000200', 'Table.ActivityWrite', 'Write Activity', '<TODO>', 'Activity');	

------------------------------------   Buffer  ------------------------------------
------------------------------------------------------------------------------------
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000300', 'Table.PagesInBuffer', 'Pages in Buffer', '<TODO>', 'ServerMemory');	
INSERT INTO #Fact_table
VALUES   ('E68C915D-EDD3-466F-8514-000000000301', 'Table.IndexesPagesInBuffer', 'Indexes Pages in Buffer', '<TODO>', 'ServerMemory');	



SELECT * FROM #Fact_table
DROP TABLE #Fact_table


/*
		(8, 'The Primary Key uses the Identity column', NULL),		
		(11, 'All Foreign Keys columns has matching data types', NULL), 		
		--Table Size (might be a big diff between staging and prod)
		(4, 'Table Size (excluding indexes)',NULL),
		(4, 'Table Size (with indexes)',NULL),
		--Indexes
		(13, 'The Primary Key uses a Clustered Index', NULL)
*/
